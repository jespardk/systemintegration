@page "/dashboard"
@inject PowerMeasurementRetriever PowerMeasurementsService
@inject WeatherForecastRetriever WeatherService
@inject TemperatureReporter TemperatureReportingService
@inject DanishEnergyPriceRetriever DanishEnergyPriceRetriever

@code {
    private ForecastAggregateResponse? _weatherForecast;
    private PowerProductionResponse? _powerProduction;
    private TemperatureReportAggregateResponse? _temperatureReport;
    private DanishEnergyPriceResponse? _danishEnergyPriceResponse;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Ensure this is only triggered on first load - not every time the view/DOM is rerendered
            await LoadData();
            Console.WriteLine("Initial view render OK");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadData()
    {
        // Fetch data sources in parallel

        List<Task> tasks = new();

        tasks.Add(Task.Run(async () =>
        {
            _weatherForecast = await WeatherService.GetForecastAsync();
            await InvokeAsync(() => StateHasChanged());
        }));

        tasks.Add(Task.Run(async () =>
        {
            _powerProduction = await PowerMeasurementsService.GetMeasurementsAsync();
            await InvokeAsync(() => StateHasChanged());
        }));

        tasks.Add(Task.Run(async () =>
        {
            _temperatureReport = TemperatureReportingService.GetTemperatureRecent();
            await InvokeAsync(() => StateHasChanged());
        }));

        tasks.Add(Task.Run(async () =>
        {
            _danishEnergyPriceResponse = DanishEnergyPriceRetriever.GetPricesFromDayCacheAsync();
            await InvokeAsync(() => StateHasChanged());
        }));
    }
}

<!-- Data is then passed on to "Dumb" components, that will render the data with the inputted datas -->

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <PowerProductionComponent Model="_powerProduction" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <TemperatureReportComponent Model="_temperatureReport" />
        </div>
        <div class="col">
            <WeatherForecastComponent Model="_weatherForecast" />
        </div>
        <div class="col">
            <DanishEnergyPricesComponent Model="_danishEnergyPriceResponse" />
        </div>
    </div>
</div>