@page "/dashboard"
@inject PowerMeasurementRetriever PowerMeasurementsService
@inject WeatherForecastRetriever WeatherService
@inject CacheService CacheService
@inject TemperatureReporter TemperatureReportingService

@code {
    private ForecastAggregateResponse? _weatherForecast;
    private PowerProductionResponse? _powerProduction;
    private TemperatureReportAggregateResponse? _temperatureReport;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Ensure this is only triggered on first load - not every time the view is rerendered
            await LoadData();
            Console.WriteLine("First render OK");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadData()
    {
        _weatherForecast = await WeatherService.GetForecastAsync();
        await InvokeAsync(() => StateHasChanged());

        _powerProduction = await PowerMeasurementsService.GetMeasurementsAsync();
        await InvokeAsync(() => StateHasChanged());

        _temperatureReport = TemperatureReportingService.GetTemperatureRecent();
        await InvokeAsync(() => StateHasChanged());
    }
}

<div class="container-fluid">
  <div class="row">
    <div class="col">
      <PowerProductionSubview Model="_powerProduction" />
    </div>
  </div>
  <div class="row">
    <div class="col">
      <TemperatureReportSubview Model="_temperatureReport" />
    </div>
    <div class="col">
      <WeatherForecastSubview Model="_weatherForecast" />
    </div>
  </div>
</div>